#!/usr/bin/env ruby

require 'socket'
require 'fileutils'
require 'repctl'
require 'thor'

module Repctl
  module Helpers
    def do_stop(instance)
      do_admin(instance, "shutdown")
    end

    def do_reset(instance)
      do_stop(instance)
      do_config(instance)
      do_start(instance)
      do_secure_accounts(instance)
    end

    def do_start_slave(instance)
      run_mysql_query(instance, "START SLAVE")
    end

    def do_restart(instance)
      do_admin(instance, "shutown")
      do_start(instance)
    end
  end
end

class RepctlCmds < Thor

  include Thor::Actions
  include Repctl::Config
  include Repctl::Commands
  include Repctl::Servers
  include Repctl::Helpers

  desc "start [INSTANCES]", "Start one or more defined server instances."
  method_option :all, :type  => :boolean, :aliases => "-a",
    :default => false,  :desc => "Start all defined instances"
  long_desc <<-EOS
    Start one or more defined server instances.  With the --all option, 
    all defined servers are started.  Otherwise, you can give a list of
    servers to start.  If a server instance is already running, this
    command has no effect on the instance.
  EOS
  def start(*instances)
    if options[:all]
      todos = all_instances
    else
      todos = instances
    end
    todos.each do |instance|
      say "Starting instance #{instance}.", :green
      do_start(instance)
    end
  end
  
  desc "stop [INSTANCES]", "Stop one or more running server instances."
  method_option :all, :type  => :boolean, :aliases => "-a",
    :default => false,  :desc => "Stop all running instances"
  long_desc <<-EOS
    Stop one or more running server instances.  With the --all option, 
    all running servers are stopped.  Otherwise, you can give a list of
    servers to stop.
  EOS
  def stop(*instances)
    if options[:all]
      todos = all_live_instances
    else
      todos = instances
    end
    todos.each do |instance|
      say "Stopping instance #{instance}.", :green
      do_stop(instance)
    end
  end
  
  desc "config [INSTANCES]", "Initialize the data directory for server instances."
  method_option :all, :type  => :boolean, :aliases => "-a",
    :default => false,  :desc => "Initialize all defined instances"
  long_desc <<-EOS
    Initialize the data directory for one or more server instances.
    With the --all option, the data directory for all defined servers
    is initialized. Otherwise, you can give a list of defined server
    instances.
  EOS
  def config(*instances)
    if options[:all]
      todos = all_instances
    else
      todos = instances
    end
    todos.each do |instance|
    say "Initializing new data directory for instance #{instance}.", :green
      do_config(instance)
    end
  end

  desc "secure_accounts [INSTANCES]", "Add password to root and anonymous accounts."
  method_option :all, :type  => :boolean, :aliases => "-a",
    :default => false,  :desc => "Secure accounts for  all running instances"
  long_desc <<-EOS
    Add a password to the existing root and anonymous accounts of one or more
    running server instances.  With the --all option, all running servers
    secured.  Otherwise, you can give a list of servers to process.
  EOS
  def secure_accounts(*instances)
    if options[:all]
      todos = all_live_instances
    else
      todos = instances
    end
    todos.each do |instance|
      say "Securing accounts for instance #{instance}.", :green
      do_secure_accounts(instance)
    end
  end

  desc "reset [INSTANCES]", "Reset one or more define server instances."
  method_option :all, :type  => :boolean, :aliases => "-a",
    :default => false,  :desc => "Reset all defined instances"
  long_desc <<-EOS
    Reset one or more defined server instances. If the --all option is
    given the target servers are all defined servers, otherwise the
    target servers are those specified in the instance argument.
    If a target server instance is running, stop it.  Then configure its
    data directory, (re)start the server, and secure the accounts.
  EOS
  def reset(*instances)
    if options[:all]
      todos = all_instances
    else
      todos = instances
    end
    todos.each do |instance|
      say "Resetting instance #{instance}.", :green
      do_reset(instance)
    end
  end
  
  desc "restart INSTANCE"  , "Stop and start a server instance."
  def restart(instance)
    say "Restarting instance #{instance}", :green
    do_stop(instance)
    do_start(instance)
  end

  desc "start_slave SLAVE", "Issue START SLAVE on the SLAVE MySQL instance."
  def start_slave(slave)
    say "Starting slave #{slave}", :green
    do_start_slave(slave)
  end
  
  desc "change_master MASTER SLAVE FILE POSITION", "Execute CHANGE MASTER TO on the SLAVE."
  def change_master(master, slave, file, position)
    say "Changing master: master = #{master}, slave = #{slave}, file = #{file}, position = #{position}"
    do_change_master(master, slave, :file => file, :position => position)
  end
  
  desc "crash INSTANCE", "Crash a running server."
  def crash(instance)
    say "Crashing instance #{instance}", :red
    do_crash(instance)
  end
  
  desc "repl_user INSTANCE", "Create the replication user account on a MySQL instance."
  def repl_user(instance)
    say "Creating replication account on instance #{instance}.", :green
    do_repl_user(instance)
  end
  
  desc "cluster_user INSTANCE", "Create the cluster user account on a MySQL instance."
  def cluster_user(instance)
    say "Installing cluster user for instance #{instance}.", :green
    do_cluster_user(instance)
  end

  desc "status", "Show the status of replication."
   method_option :continuous, :aliases => "-c", :type => :numeric,
    :desc => "Continuous output at specified interval (in seconds)."
  method_option :servers, :aliases => "-s", :type => :array,
    :desc => "Only check the status of given servers."
  def status
    todos = options[:servers] || all_live_instances
    unless todos.any?
      say "No Running Servers.", :blue
      return
    end
    header = sprintf("%-5s%-25s%-25s%-25s%-8s\n",
      "inst", "master", "received", "applied", "lag")
      
    loop do  
      say header, :blue
    
      todos.each do |i|
        coordinates = get_coordinates(i)
        slave_status = get_slave_status(i)
        is_slave = !(slave_status["Error"] == "MySQL server is not a slave.")
        master_file = coordinates[:file]
        master_pos =  coordinates[:position]
        if is_slave
          recv_file = slave_status["Master_Log_File"]
          recv_pos = slave_status["Read_Master_Log_Pos"]
          apply_file = slave_status["Relay_Master_Log_File"]
          apply_pos = slave_status["Exec_Master_Log_Pos"]
          lag = slave_status["Seconds_Behind_Master"]
        end
          
        format = "%-5d%16s:%-8d"
        if is_slave
          if lag
            lag = lag.to_s
          else
            lag = "-"
          end
          format += "%16s:%-8d%16s:%-8d%-8s"
          str = sprintf(format, i, master_file, master_pos, recv_file, recv_pos,
            apply_file, apply_pos, lag)
        else
          str = sprintf(format, i, master_file, master_pos)
        end
      
        say str + "\n", :yellow
      end
      break unless options[:continuous]
      sleep options[:continuous]
      say ""
    end
  end
    
  desc "dump INSTANCE [DUMPFILE]", "Dump all databases after FLUSH TABLES WITH READ LOCK"
  def dump(instance, dumpfile = DEFAULT_DUMPFILE)
    coordinates = do_dump(instance, dumpfile)
    file = coordinates[:file]
    position = coordinates[:position]
    puts "(#{file}, #{position})"
    [file, String(position)]
  end
  
  desc "restore INSTANCE [DUMPFILE]", "Restore INSTANCE from a \'mysqldump\' file DUMPFILE."
  def restore(slave, dumpfile = DEFAULT_DUMPFILE)
    do_restore(slave, dumpfile)
  end

  #
  # Setting Up Replication with Existing Data using the 'mysqldump' utility. The
  # master has existing data.
  #
  desc "add_slave MASTER SLAVE", "Master has some data that is used to initialize the slave."
  method_option :populate, :type => :boolean, :default => false
  def add_slave(master, slave)
    reset(slave)
    
    if options[:populate]
      invoke "utils:bench", [master, "/opt/MySQL/b2.properties"]
    end
    file, position = invoke "mysql:dump", [master]
    
    # Slave is running, but it is not yet configured as a slave.
    # Load slave from the dump file...
    invoke "mysql:restore", [slave]
    
    do_change_master(master, slave, :file => file, :position => position)
    do_start_slave(slave)
  end

  DEFAULT_MASTER = 1

  desc "bench [INSTANCE] [PROPS]", "Run the Tungsten Bristlecone benchmarker.
  The INSTANCE specifies the instance to perform all operations to, and PROPS
  is the properties file to use. The INSTANCE defaults to #{DEFAULT_MASTER} and
  the properties file defaults to #{BENCHMARK_PROPERTIES}."
  def bench(instance = DEFAULT_MASTER, props = nil)
    props ||= BENCHMARK_PROPERTIES
    invoke :create_db, [instance, "widgets"]
    run("#{BENCHMARK} -props #{props}", :verbose => true, :capture => false)
  end
  
  desc "create_db [INSTANCE] [DBNAME]", "Create a database on a MySQL instance.
  INSTANCE defaults to DEFAULT_MASTER, and DBNAME defaults to \"widgets\"."
  method_option :replace, :type => :boolean, :aliases => "-r",
    :desc => "drop and recreate the database"
  def create_db(instance = DEFAULT_MASTER, dbname = "widgets")
    run_mysql_query(instance, "DROP DATABASE IF EXISTS #{dbname}") if options[:replace]
    run_mysql_query(instance, "CREATE DATABASE IF NOT EXISTS #{dbname}")
  end
  
  desc "create_tbl [INSTANCE] [DBNAME] [TBLNAME]", "Create a database table."
  "INSTANCE defaults to DEFAULT_MASTER, DBNAME defaults
    to \"widgets\" and TBLNAME defaults to \"users\".  The table schema is fixed."
  method_option :replace, :type => :boolean, :aliases => "-r",
    :desc => "drop and recreate the table"
  def create_tbl(instance = DEFAULT_MASTER, dbname = "widgets", tblname = "users")
    invoke :create_db, [instance, dbname], :replace => false
    run_mysql_query(instance, 
      "DROP TABLE IF EXISTS #{dbname}.#{tblname}") if options[:replace]
    cmd = <<-EOS
      CREATE TABLE #{dbname}.#{tblname} (
        id	INT NOT NULL,
        last_name CHAR(30) NOT NULL,
        first_name CHAR(30) NOT NULL,
        credentials VARCHAR(32768) NOT NULL,
        PRIMARY KEY (id),
        INDEX name (last_name,first_name)
      )
    EOS
    run_mysql_query(instance, cmd)
  end
  
  desc "gen_rows [INSTANCE], [DBNAME], [TBLNAME]", "Add rows to a table that
    was created by \"utils:create_tbl\". INSTANCE defaults
    to DEFAULT_MASTER, DBNAME defaults to \"widgets\", and TBLNAME defaults
    to \"users\"."
  method_option :delay, :type => :numeric, :aliases => "-d", :default => 0, 
    :desc => "sleep for the specified number of milliseconds between row inserts."
    method_option :count, :type => :numeric, :aliases => "-c", :default => 1000, 
       :desc => "number of rows to insert"
    method_option :size, :type => :numeric, :aliases => "-s", :default => 100, 
      :desc => "the approximate size of the record to insert (in bytes)."
    method_option :forever, :type => :boolean, :aliases => "-f",
      :desc => "run forever, ignoring COUNT option."
    method_option :verbose, :type => :boolean, :aliases => "-v",
      :desc => "print a '.' for each row inserted."
  def gen_rows(instance = DEFAULT_MASTER, dbname = "widgets", tblname = "users")
    invoke :create_tbl, [instance, dbname], :replace => true
    size = options[:size]
    size ||= 100
    size = [size, 32768].min
    data = IO.read("#{Mysql::DATA_HOME}/words.txt", size)
    id = 1
    count = 0
    
    loop do
      cmd = <<-EOS
        INSERT INTO #{dbname}.#{tblname} VALUES (
          #{id},
          'Fillmore',
          'Millard',
          '#{data}'
        )
      EOS
      run_mysql_query(instance, cmd)
      putc "." if options[:verbose]
      id += 1
      count += 1
      break if (count >= options[:count] and (not options[:forever]))
      msecs = options[:delay]
      sleep(msecs / 1000.0) if msecs > 0
    end
  end

  #
  # Setting Up Replication with New Master and Slaves.
  # Here, we stop all MySQL servers, remove the data directories, reinitialize
  # the data directories, restart the servers, and set up a master/slave
  # relationship.
  #
  desc "repl_pair MASTER SLAVE",
    "Set up a single master/slave replication pair from the very beginning."
  def repl_pair(master, slave)
    say "master is #{master}, slave is #{slave}", :green
    do_reset(master)
    do_reset(slave)
    do_cluster_user(master)
    do_repl_user(master)
    coordinates = get_coordinates(master)
    file = coordinates[:file]
    position = coordinates[:position]
    say "File is #{file}, Position is #{position}", :green
    do_change_master(master, slave, :file => file, :position => position)
    do_start_slave(slave)
  end

  desc "repl_trio MASTER SLAVE1 SLAVE2",
    "Set up a single master and two slave replication cluster."
  method_option :reset, :type => :boolean, :default => true
  def repl_trio(master, slave1, slave2)
    say "master is #{master}, slaves are #{slave1} and #{slave2}", :green
    if options[:reset]
      do_reset(master)
      do_reset(slave1)
      do_reset(slave2)
      do_cluster_user(master)
      do_repl_user(master)
    else
      do_restart(master)
      do_restart(slave1)
      do_restart(slave2)
    end
    coordinates = get_coordinates(master)
    file = coordinates[:file]
    position = coordinates[:position]
    say "File is #{file}, Position is #{position}", :green
    do_change_master(master, slave1, :file => file, :position => position)
    do_start_slave(slave1)
    do_change_master(master, slave2, :file => file, :position => position)
    do_start_slave(slave2)
  end

  desc "install sample config files to DIRECTORY", "After initial install, use these "
  "as templates for configuration. The target directory must exist and be empty."
  def install_sample_configs(dest_dir) 
    source_dir =  File.join(Repctl::Config.const_get(:GEM_HOME), "config")
    source_files = Dir.glob(File.join(source_dir, '*'))
    if File.directory?(dest_dir)
      if Dir.entries(dest_dir).size == 2 # directory is empty
        FileUtils.copy(source_files, dest_dir)
      else
        say "Target directory must be empty.", :red
      end
    else
      say "Config target #{to_dir} is not a directory.", :red
    end
  end
end

RepctlCmds.start
